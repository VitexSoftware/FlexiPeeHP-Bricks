<?php

namespace Test\FlexiPeeHP\Bricks;

use FlexiPeeHP\Bricks\ParovacFaktur;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-04-17 at 19:11:15.
 */
class ParovacFakturTest extends \Test\Ease\SandTest
{
    /**
     * @var ParovacFaktur
     */
    protected $object;

    /**
     * Prepare Testing Invoice
     * 
     * @param array $initialData
     * 
     * @return \FlexiPeeHP\FakturaVydana
     */
    public function makeInvoice($initialData = [])
    {
        $yesterday = new \DateTime();
        $yesterday->modify('-1 day');
        $testCode  = 'TEST_'.\Ease\Sand::randomString();
        $invoice   = new \FlexiPeeHP\FakturaVydana();
        $invoice->takeData(array_merge([
            'kod' => $testCode,
            'varSym' => 123,
            'specSym' => 456,
            'popis' => 'FlexiPeeHP-Bricks Unit Test',
            'datVyst' => \FlexiPeeHP\FlexiBeeRO::dateToFlexiDate($yesterday),
            'typDokl' => \FlexiPeeHP\FlexiBeeRO::code('FAKTURA')
                ], $initialData));
        $invoice->insertToFlexiBee();
        return $invoice;
    }

    /**
     * Prepare testing payment
     * 
     * @param array $initialData
     * 
     * @return \FlexiPeeHP\Banka
     */
    public function makePayment($initialData = [])
    {
        $yesterday = new \DateTime();
        $yesterday->modify('-1 day');

        $testCode = 'TEST_'.\Ease\Sand::randomString();

        $payment = new \FlexiPeeHP\Banka($initialData);
        $payment->insertToFlexiBee( array_merge( [
        'kod' => $testCode,
        'banka' => 'code:HLAVNI',
        'typPohybuK' => 'typPohybu.prijem',
        'varSym' => 123,
        'specSym' => 456,
        'datVyst' => \FlexiPeeHP\FlexiBeeRO::dateToFlexiDate($yesterday),
        'typDokl' => \FlexiPeeHP\FlexiBeeRO::code('STANDARD')
        ], $initialData));
        return $payment;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ParovacFaktur();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::setStartDay
     */
    public function testSetStartDay()
    {
        $this->object->setStartDay(1);
        $this->assertEquals(1, $this->object->daysBack);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::getPaymentsToProcess
     */
    public function testGetPaymentsToProcess()
    {
        $this->object->getPaymentsToProcess(0); //Empty Restult
        $payment           = $this->makePayment(['popis' => 'Test GetPaymentsToProcess FlexiPeeHP-Bricks']);
        $paymentsToProcess = $this->object->getPaymentsToProcess(1);
        $this->assertArrayHasKey($payment->getRecordID(), $paymentsToProcess,
            'Can\'t find Payment');
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::getInvoicesToProcess
     */
    public function testGetInvoicesToProcess()
    {
        $invoice           = $this->makeInvoice(['popis' => 'Test InvoicesToProcess FlexiPeeHP-Bricks']);
        $invoicesToProcess = $this->object->getInvoicesToProcess(1);
        $this->assertArrayHasKey($invoice->getRecordID(), $invoicesToProcess,
            'Can\'t find Invoice');
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::invoicesMatchingByBank
     */
    public function testInvoicesMatchingByBank()
    {
        $this->object->setStartDay(-1);
        $this->object->invoicesMatchingByBank();
        $this->object->setStartDay(1);
        $paymentChecker  = new \FlexiPeeHP\Banka(null,
            ['detail' => 'custom:sparovano']);
        $paymentsToCheck = $this->object->getPaymentsToProcess(1);
        $this->object->invoicesMatchingByBank();
        foreach ($paymentsToCheck as $paymentID => $paymentData) {
            $paymentChecker->loadFromFlexiBee($paymentID);
            $this->assertEquals('true',
                $paymentChecker->getDataValue('sparovano'), 'Matching error');
        }
        
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::invoicesMatchingByInvoices
     */
    public function testInvoicesMatchingByInvoices()
    {
        $invoiceChecker  = new \FlexiPeeHP\FakturaVydana(null,
            ['detail' => 'custom:sparovano']);
        $invoicesToCheck = $this->object->getPaymentsToProcess(1);
        $this->object->invoicesMatchingByInvoices();
        foreach ($invoicesToCheck as $paymentID => $paymentData) {
            $invoiceChecker->loadFromFlexiBee($paymentID);
            $this->assertEquals('true',
                $invoiceChecker->getDataValue('sparovano'), 'Matching error');
        }
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::settleCreditNote
     */
    public function testSettleCreditNote()
    {
        $dobropis = $this->makeInvoice(['typDokl' => \FlexiPeeHP\FlexiBeeRO::code('ODD'),
            'popis' => 'Test SettleCreditNote FlexiPeeHP-Bricks']);
        $payment  = $this->makePayment();
        $this->object->settleCreditNote($dobropis, $payment);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::settleProforma
     */
    public function testSettleProforma()
    {
        $zaloha  = $this->makeInvoice(['typDokl' => \FlexiPeeHP\FlexiBeeRO::code('ZÁLOHA'),
            'popis' => 'Test SettleProforma FlexiPeeHP-Bricks']);
        $payment = $this->makePayment();
        $this->object->settleProforma($zaloha, $payment);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::settleInvoice
     */
    public function testSettleInvoice()
    {
        $invoice = $this->makeInvoice(['typDokl' => \FlexiPeeHP\FlexiBeeRO::code('FAKTURA'),
            'popis' => 'Test SettleInvoice FlexiPeeHP-Bricks PHPUnit']);
        $payment = $this->makePayment();
        $this->assertEquals(1, $this->object->settleInvoice($invoice, $payment));
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::invoiceCopy
     */
    public function testInvoiceCopy()
    {
        $invoice = $this->makeInvoice(['popis' => 'Test InvoiceCopy FlexiPeeHP-Bricks']);
        $this->object->invoiceCopy($invoice, ['poznam' => 'Copied By unitTest']);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::hotfixDeductionOfAdvances
     */
    public function testHotfixDeductionOfAdvances()
    {
        $this->object->hotfixDeductionOfAdvances();
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::findInvoices
     */
    public function testFindInvoices()
    {
        $this->object->findInvoices(['varSym' => '123']);
        $this->object->findInvoices(['specSym' => '356']);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::findPayments
     */
    public function testFindPayments()
    {
        $this->object->findPayments(['varSym' => '123']);
        $this->object->findPayments(['specSym' => '356']);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::findInvoice
     */
    public function testFindInvoice()
    {
        $found = $this->object->findInvoice(['varSym' => 123]);
        $found = $this->object->findInvoice(['specSym' => 456]);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::findPayment
     */
    public function testFindPayment()
    {
        $this->object->findPayment(['varSym' => 123]);
        $this->object->findPayment(['specSym' => 456]);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::findBestPayment
     */
    public function testFindBestPayment()
    {
        $this->object->findBestPayment($payments, $invoice);
    }

    /**
     * @covers FlexiPeeHP\Bricks\ParovacFaktur::apiUrlToLink
     */
    public function testApiUrlToLink()
    {
        $this->object->apiUrlToLink($apiURL);
    }
}
